//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace WcfConsole.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TestMethodStr", ReplyAction="http://tempuri.org/IService1/TestMethodStrResponse")]
        string TestMethodStr(int i);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TestMethodStr", ReplyAction="http://tempuri.org/IService1/TestMethodStrResponse")]
        System.Threading.Tasks.Task<string> TestMethodStrAsync(int i);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TestMethodInt", ReplyAction="http://tempuri.org/IService1/TestMethodIntResponse")]
        int TestMethodInt(int i);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TestMethodInt", ReplyAction="http://tempuri.org/IService1/TestMethodIntResponse")]
        System.Threading.Tasks.Task<int> TestMethodIntAsync(int i);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TestMethodDou", ReplyAction="http://tempuri.org/IService1/TestMethodDouResponse")]
        double TestMethodDou(int i, int j);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/TestMethodDou", ReplyAction="http://tempuri.org/IService1/TestMethodDouResponse")]
        System.Threading.Tasks.Task<double> TestMethodDouAsync(int i, int j);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WcfConsole.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WcfConsole.ServiceReference1.IService1>, WcfConsole.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string TestMethodStr(int i) {
            return base.Channel.TestMethodStr(i);
        }
        
        public System.Threading.Tasks.Task<string> TestMethodStrAsync(int i) {
            return base.Channel.TestMethodStrAsync(i);
        }
        
        public int TestMethodInt(int i) {
            return base.Channel.TestMethodInt(i);
        }
        
        public System.Threading.Tasks.Task<int> TestMethodIntAsync(int i) {
            return base.Channel.TestMethodIntAsync(i);
        }
        
        public double TestMethodDou(int i, int j) {
            return base.Channel.TestMethodDou(i, j);
        }
        
        public System.Threading.Tasks.Task<double> TestMethodDouAsync(int i, int j) {
            return base.Channel.TestMethodDouAsync(i, j);
        }
    }
}
