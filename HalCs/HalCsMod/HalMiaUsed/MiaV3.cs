//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.1.1
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using System.Windows.Forms;
using HalconDotNet;

public partial class HDevelopExport
{
  //public HTuple hv_ExpDefaultWinHandle;

  //public void HDevelopStop()
  //{
  //  MessageBox.Show("Press button to continue", "Program stop");
  //}

  // Procedures 
  // Main procedure 
  private void action()
  {


    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_Image=null;

    // Local control variables 

    HTuple hv_WindowHandle = new HTuple(), hv_AcqHandle = new HTuple();
    HTuple hv_DecodedDataStrings = new HTuple(), hv_Exception = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_Image);
    try
    {
      //***
      //** DISPLAY
      //* DISPLAY INIT
      dev_update_off();
      //dev_close_window(...);
      //dev_open_window(...);

      //***
      //** LOOP
      //Image Acquisition 01: Code generated by Image Acquisition 01
      hv_AcqHandle.Dispose();
      HOperatorSet.OpenFramegrabber("GigEVision2", 0, 0, 0, 0, 0, 0, "progressive", 
          -1, "default", -1, "false", "default", "c42f90f2b7fa_Hikvision_MVCE12010GM", 
          0, -1, out hv_AcqHandle);
      while ((int)(1) != 0)
      {
        ho_Image.Dispose();
        HOperatorSet.GrabImage(out ho_Image, hv_AcqHandle);
        //read_image (Image, 'C:/Users/iwake/OneDrive - wake/Desktop/Mia/Images/V3/1SHIL.bmp')

        try
        {
          {
          HObject ExpTmpOutVar_0;
          image_cali_map(ho_Image, out ExpTmpOutVar_0, new HTuple(), new HTuple());
          ho_Image.Dispose();
          ho_Image = ExpTmpOutVar_0;
          }
          //dev_display (Image)

          //***
          //** Class
          hv_DecodedDataStrings.Dispose();
          image_class_mia(ho_Image, hv_WindowHandle, out hv_DecodedDataStrings);

          //*** Progress
          //** 1SHIL
          if ((int)(new HTuple(hv_DecodedDataStrings.TupleEqual("1SHIL"))) != 0)
          {
            image_prog_1SHIL(ho_Image, hv_WindowHandle);

            //** 2HNCL
          }
          else if ((int)(new HTuple(hv_DecodedDataStrings.TupleEqual(
              "2HNCL"))) != 0)
          {
            image_prog_2HNCL(ho_Image, hv_WindowHandle);
            //** 3CWDL
          }
          else
          {
            image_prog_3CWDL(ho_Image, hv_WindowHandle);

          }

          //stop ()
        }
        // catch (Exception) 
        catch (HalconException HDevExpDefaultException1)
        {
          HDevExpDefaultException1.ToHTuple(out hv_Exception);
        }

      }
      HOperatorSet.CloseFramegrabber(hv_AcqHandle);




    }
    catch (HalconException HDevExpDefaultException)
    {
      ho_Image.Dispose();

      hv_WindowHandle.Dispose();
      hv_AcqHandle.Dispose();
      hv_DecodedDataStrings.Dispose();
      hv_Exception.Dispose();

      throw HDevExpDefaultException;
    }
    ho_Image.Dispose();

    hv_WindowHandle.Dispose();
    hv_AcqHandle.Dispose();
    hv_DecodedDataStrings.Dispose();
    hv_Exception.Dispose();

  }

  //public void InitHalcon()
  //{
  //  // Default settings used in HDevelop
  //  HOperatorSet.SetSystem("width", 512);
  //  HOperatorSet.SetSystem("height", 512);
  //}

  //public void RunHalcon(HTuple Window)
  //{
  //  hv_ExpDefaultWinHandle = Window;
  //  action();
  //}

}

