//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.1.1
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using HalconDotNet;

public partial class HDevelopExport
{
  public HTuple hv_ExpDefaultWinHandle;

  // Procedures 
  public void image_get_bar (HObject ho_Image, out HObject ho_SymbolRegions, HTuple hv_BarCodeHandle, 
      HTuple hv_WindowHandle, out HTuple hv_DecodedDataStrings, out HTuple hv_someitem)
  {




    // Local iconic variables 

    HObject ho_ObjectSelected=null;

    // Local control variables 

    HTuple hv_BarWidth = new HTuple(), hv_BarHeight = new HTuple();
    HTuple hv_CodeTypes = new HTuple(), hv_BarIndex = new HTuple();
    HTuple hv_BarcodeArea = new HTuple(), hv_BarcodeRow = new HTuple();
    HTuple hv_BarcodeColumn = new HTuple(), hv_BarRatio = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_SymbolRegions);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
    hv_DecodedDataStrings = new HTuple();
    hv_someitem = new HTuple();
    //
    //Use autodiscrimination to decode any of the bar code types
    //supported by HALCON (except PharmaCode) or determine the bar
    //code type of unknown bar codes
    //
    //* INIT CONST
    //BarWidth := 800
    //BarHeight := 100
    hv_CodeTypes.Dispose();
    hv_CodeTypes = "Code 128";
    //CodeTypes := ['auto']

    //read_bar_code_model ('C:/Users/iwake/OneDrive - wake/Desktop/HalconPractise/HalconProj/Barcode/BarCodeHandle.bcm', BarCodeHandle)
    //read_bar_code_model ('BarCodeHandle.bcm', BarCodeHandle)
    //set_bar_code_param (BarCodeHandle, 'check_char', 'present')
    //
    //Set display defaults
    //get_image_size (Image, Width, Height)


    //
    //Find and decode bar codes. Measure the time needed.
    ho_SymbolRegions.Dispose();hv_DecodedDataStrings.Dispose();
    HOperatorSet.FindBarCode(ho_Image, out ho_SymbolRegions, hv_BarCodeHandle, hv_CodeTypes, 
        out hv_DecodedDataStrings);

    //get_bar_code_result (BarCodeHandle, 'all', 'someitem', someitem)


    //* DISPLAY BARCODE
    set_display_font(hv_ExpDefaultWinHandle, 14, "mono", "true", "false");
    HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
    HOperatorSet.SetLineWidth(hv_ExpDefaultWinHandle, 3);
    HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "forest green");
    HOperatorSet.DispObj(ho_SymbolRegions, hv_ExpDefaultWinHandle);
    for (hv_BarIndex=1; (int)hv_BarIndex<=(int)(new HTuple(hv_DecodedDataStrings.TupleLength()
        )); hv_BarIndex = (int)hv_BarIndex + 1)
    {
      ho_ObjectSelected.Dispose();
      HOperatorSet.SelectObj(ho_SymbolRegions, out ho_ObjectSelected, hv_BarIndex);
      hv_BarcodeArea.Dispose();hv_BarcodeRow.Dispose();hv_BarcodeColumn.Dispose();
      HOperatorSet.AreaCenter(ho_SymbolRegions, out hv_BarcodeArea, out hv_BarcodeRow, 
          out hv_BarcodeColumn);
      hv_BarHeight.Dispose();hv_BarWidth.Dispose();hv_BarRatio.Dispose();
      HOperatorSet.HeightWidthRatio(ho_ObjectSelected, out hv_BarHeight, out hv_BarWidth, 
          out hv_BarRatio);
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.SetTposition(hv_ExpDefaultWinHandle, hv_BarcodeRow-hv_BarHeight, 
          hv_BarcodeColumn-(0.5*hv_BarWidth));
      }
      using (HDevDisposeHelper dh = new HDevDisposeHelper())
      {
      HOperatorSet.WriteString(hv_ExpDefaultWinHandle, hv_DecodedDataStrings.TupleSelect(
          hv_BarIndex-1));
      }
    }

    hv_someitem.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_someitem = new HTuple();
    hv_someitem = hv_someitem.TupleConcat(hv_BarcodeRow, hv_BarcodeColumn);
    }
    ho_ObjectSelected.Dispose();

    hv_BarWidth.Dispose();
    hv_BarHeight.Dispose();
    hv_CodeTypes.Dispose();
    hv_BarIndex.Dispose();
    hv_BarcodeArea.Dispose();
    hv_BarcodeRow.Dispose();
    hv_BarcodeColumn.Dispose();
    hv_BarRatio.Dispose();

    return;
  }


}

