//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.1.1
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using System.Windows.Forms;
using HalconDotNet;

public partial class HDevelopExport
{
  public HTuple hv_ExpDefaultWinHandle;

  public void HDevelopStop()
  {
    MessageBox.Show("Press button to continue", "Program stop");
  }

  // Procedures 
  public void mia_sign (HObject ho_Image4, HTuple hv_HeadSignRow, HTuple hv_HeadSignCol, 
      HTuple hv_WindowHandle, HTuple hv_SignWidth, out HTuple hv_sign)
  {




    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_RoiSign1, ho_RoiSign2, ho_RoiSign3;
    HObject ho_RoiSign, ho_SignFeat;

    // Local control variables 

    HTuple hv_SignWidthNormal = new HTuple(), hv_SignScale = new HTuple();
    HTuple hv_HeadWidth = new HTuple(), hv_HeadHeight = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_RoiSign1);
    HOperatorSet.GenEmptyObj(out ho_RoiSign2);
    HOperatorSet.GenEmptyObj(out ho_RoiSign3);
    HOperatorSet.GenEmptyObj(out ho_RoiSign);
    HOperatorSet.GenEmptyObj(out ho_SignFeat);
    hv_sign = new HTuple();
    //----Package
    //* 无倾斜
    //* 数据适配CWDL

    hv_SignWidthNormal.Dispose();
    hv_SignWidthNormal = 2200;
    hv_SignScale.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_SignScale = hv_SignWidth/hv_SignWidthNormal;
    }
    hv_HeadWidth.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_HeadWidth = hv_SignScale*300;
    }
    hv_HeadHeight.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_HeadHeight = hv_SignScale*150;
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_RoiSign1.Dispose();
    HOperatorSet.GenRectangle2(out ho_RoiSign1, hv_HeadSignRow+(0.4*hv_HeadHeight), 
        hv_HeadSignCol+(0.17*hv_SignWidth), (new HTuple(0)).TupleRad(), hv_HeadWidth/2, 
        hv_HeadHeight/2);
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_RoiSign2.Dispose();
    HOperatorSet.GenRectangle2(out ho_RoiSign2, hv_HeadSignRow+(0.4*hv_HeadHeight), 
        hv_HeadSignCol+(0.38*hv_SignWidth), (new HTuple(0)).TupleRad(), hv_HeadWidth/2, 
        hv_HeadHeight/2);
    }
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    ho_RoiSign3.Dispose();
    HOperatorSet.GenRectangle2(out ho_RoiSign3, hv_HeadSignRow+(0.4*hv_HeadHeight), 
        hv_HeadSignCol+(0.62*hv_SignWidth), (new HTuple(0)).TupleRad(), hv_HeadWidth/2, 
        hv_HeadHeight/2);
    }


    ho_RoiSign.Dispose();
    HOperatorSet.GenEmptyObj(out ho_RoiSign);
    {
    HObject ExpTmpOutVar_0;
    HOperatorSet.ConcatObj(ho_RoiSign1, ho_RoiSign, out ExpTmpOutVar_0);
    ho_RoiSign.Dispose();
    ho_RoiSign = ExpTmpOutVar_0;
    }
    {
    HObject ExpTmpOutVar_0;
    HOperatorSet.ConcatObj(ho_RoiSign2, ho_RoiSign, out ExpTmpOutVar_0);
    ho_RoiSign.Dispose();
    ho_RoiSign = ExpTmpOutVar_0;
    }
    {
    HObject ExpTmpOutVar_0;
    HOperatorSet.ConcatObj(ho_RoiSign3, ho_RoiSign, out ExpTmpOutVar_0);
    ho_RoiSign.Dispose();
    ho_RoiSign = ExpTmpOutVar_0;
    }
    //concat_obj (RoiSign4, RoiSign, RoiSign)


    //* Judgement
    ho_SignFeat.Dispose();hv_sign.Dispose();
    image_judge_sign_judge(ho_RoiSign, ho_Image4, out ho_SignFeat, out hv_sign);


    //** Display
    HOperatorSet.DispObj(ho_SignFeat, hv_ExpDefaultWinHandle);
    //stop ()
    ho_RoiSign1.Dispose();
    ho_RoiSign2.Dispose();
    ho_RoiSign3.Dispose();
    ho_RoiSign.Dispose();
    ho_SignFeat.Dispose();

    hv_SignWidthNormal.Dispose();
    hv_SignScale.Dispose();
    hv_HeadWidth.Dispose();
    hv_HeadHeight.Dispose();

    return;
  }


}

