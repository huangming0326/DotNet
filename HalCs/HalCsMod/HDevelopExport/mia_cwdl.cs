//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.1.1
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using HalconDotNet;

public partial class HDevelopExport
{
  public HTuple hv_ExpDefaultWinHandle;

  // Procedures 
  public void mia_cwdl (HObject ho_Image, HTuple hv_WindowHandle, HTuple hv_signLocRightX, 
      HTuple hv_signLocLeftX, HTuple hv_signLocRightY, HTuple hv_signLocLeftY, out HTuple hv_DecodedDataStrings, 
      out HTuple hv_sign)
  {




    // Local iconic variables 

    HObject ho_SymbolRegions, ho_ImageAffineTrans;

    // Local control variables 

    HTuple hv_BarCodeHandle = new HTuple(), hv_someitem = new HTuple();
    HTuple hv_SignWidth = new HTuple(), hv_HeadSignScale = new HTuple();
    HTuple hv_HeadSignRow = new HTuple(), hv_HeadSignCol = new HTuple();
    HTuple hv_Phi = new HTuple(), hv_HomMat2D = new HTuple();
    HTuple hv_HomMat2DRotate = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_SymbolRegions);
    HOperatorSet.GenEmptyObj(out ho_ImageAffineTrans);
    hv_DecodedDataStrings = new HTuple();
    hv_sign = new HTuple();
    //***
    //** INIT

    //* INIT BARCODE
    hv_BarCodeHandle.Dispose();
    HOperatorSet.CreateBarCodeModel(new HTuple(), new HTuple(), out hv_BarCodeHandle);
    HOperatorSet.SetBarCodeParam(hv_BarCodeHandle, "quiet_zone", "true");
    //** RECOGNITION
    //* BARCODE
    ho_SymbolRegions.Dispose();hv_DecodedDataStrings.Dispose();hv_someitem.Dispose();
    image_get_bar(ho_Image, out ho_SymbolRegions, hv_BarCodeHandle, hv_WindowHandle, 
        out hv_DecodedDataStrings, out hv_someitem);
    //* Sign
    //* 制单人: 1120 186 signLocLeftX signLocLeftY
    //* 科室收货人 1110 2400 signLocRightX signLocRightY
    //signLocLeftX := 1120
    //signLocLeftY := 186
    //signLocRightX := 1110
    //signLocRightY := 2400

    hv_SignWidth.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_SignWidth = hv_signLocRightY-hv_signLocLeftY;
    }
    hv_HeadSignScale.Dispose();
    hv_HeadSignScale = 1;

    hv_HeadSignRow.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_HeadSignRow = (hv_signLocLeftX+hv_signLocRightX)/2;
    }
    hv_HeadSignCol.Dispose();
    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_HeadSignCol = (hv_signLocLeftY+hv_signLocRightY)/2;
    }

    using (HDevDisposeHelper dh = new HDevDisposeHelper())
    {
    hv_Phi.Dispose();
    HOperatorSet.TupleAtan2(hv_signLocRightX-hv_signLocLeftX, hv_signLocRightY-hv_signLocLeftY, 
        out hv_Phi);
    }
    hv_HomMat2D.Dispose();
    HOperatorSet.HomMat2dIdentity(out hv_HomMat2D);
    hv_HomMat2DRotate.Dispose();
    HOperatorSet.HomMat2dRotate(hv_HomMat2D, hv_Phi, hv_HeadSignRow, hv_HeadSignCol, 
        out hv_HomMat2DRotate);
    ho_ImageAffineTrans.Dispose();
    HOperatorSet.AffineTransImage(ho_Image, out ho_ImageAffineTrans, hv_HomMat2DRotate, 
        "constant", "false");

    hv_sign.Dispose();
    mia_sign(ho_ImageAffineTrans, hv_HeadSignRow, hv_HeadSignCol, hv_WindowHandle, 
        hv_SignWidth, out hv_sign);
    ho_SymbolRegions.Dispose();
    ho_ImageAffineTrans.Dispose();

    hv_BarCodeHandle.Dispose();
    hv_someitem.Dispose();
    hv_SignWidth.Dispose();
    hv_HeadSignScale.Dispose();
    hv_HeadSignRow.Dispose();
    hv_HeadSignCol.Dispose();
    hv_Phi.Dispose();
    hv_HomMat2D.Dispose();
    hv_HomMat2DRotate.Dispose();

    return;
  }


}

