//
// File generated by HDevelop for HALCON/.NET (C#) Version 18.11.1.1
// Non-ASCII strings in this file are encoded in UTF-8.
// 
// Please note that non-ASCII characters in string constants are exported
// as octal codes in order to guarantee that the strings are correctly
// created on all systems, independent on any compiler settings.
// 
// Source files with different encoding should not be mixed in one project.
//
//  This file is intended to be used with the HDevelopTemplate or
//  HDevelopTemplateWPF projects located under %HALCONEXAMPLES%\c#

using System;
using HalconDotNet;

public partial class HDevelopExport
{
  public HTuple hv_ExpDefaultWinHandle;

  // Procedures 
  public void image_judge_sign_judge (HObject ho_RoiSign, HObject ho_OriImage, out HObject ho_SignFeat, 
      out HTuple hv_sign)
  {



    // Stack for temporary objects 
    HObject[] OTemp = new HObject[20];

    // Local iconic variables 

    HObject ho_GrayImage, ho_ObjectSelected=null;
    HObject ho_ImageReduced=null, ho_Edges=null;

    // Local control variables 

    HTuple hv_SignNum = new HTuple(), hv_SignThreshold = new HTuple();
    HTuple hv_Index = new HTuple(), hv_Length = new HTuple();
    HTuple hv_Length1 = new HTuple();
    // Initialize local and output iconic variables 
    HOperatorSet.GenEmptyObj(out ho_SignFeat);
    HOperatorSet.GenEmptyObj(out ho_GrayImage);
    HOperatorSet.GenEmptyObj(out ho_ObjectSelected);
    HOperatorSet.GenEmptyObj(out ho_ImageReduced);
    HOperatorSet.GenEmptyObj(out ho_Edges);
    hv_sign = new HTuple();

    //** Porg
    //* Pre
    ho_GrayImage.Dispose();
    HOperatorSet.Rgb1ToGray(ho_OriImage, out ho_GrayImage);
    //get_region_convex (ROI_0, Rows, Columns)


    //* Judgement
    ho_SignFeat.Dispose();
    HOperatorSet.GenEmptyObj(out ho_SignFeat);
    //SignNum := 4
    hv_SignNum.Dispose();
    HOperatorSet.CountObj(ho_RoiSign, out hv_SignNum);
    hv_SignThreshold.Dispose();
    hv_SignThreshold = 5.0;
    HTuple end_val12 = hv_SignNum;
    HTuple step_val12 = 1;
    for (hv_Index=1; hv_Index.Continue(end_val12, step_val12); hv_Index = hv_Index.TupleAdd(step_val12))
    {
      ho_ObjectSelected.Dispose();
      HOperatorSet.SelectObj(ho_RoiSign, out ho_ObjectSelected, hv_Index);
      //截取对应区域图片
      ho_ImageReduced.Dispose();
      HOperatorSet.ReduceDomain(ho_GrayImage, ho_ObjectSelected, out ho_ImageReduced
          );
      //区域图片映射为轮廓
      ho_Edges.Dispose();
      HOperatorSet.EdgesSubPix(ho_ImageReduced, out ho_Edges, "canny", 1, 20, 40);
      {
      HObject ExpTmpOutVar_0;
      HOperatorSet.ConcatObj(ho_Edges, ho_SignFeat, out ExpTmpOutVar_0);
      ho_SignFeat.Dispose();
      ho_SignFeat = ExpTmpOutVar_0;
      }
      //得到轮廓长度数组
      hv_Length.Dispose();
      HOperatorSet.LengthXld(ho_Edges, out hv_Length);
      //云团数目大于五则有签字
      hv_Length1.Dispose();
      HOperatorSet.TupleLength(hv_Length, out hv_Length1);
      if ((int)(new HTuple(hv_Length1.TupleGreater(hv_SignThreshold))) != 0)
      {
        if (hv_sign == null)
          hv_sign = new HTuple();
        hv_sign[hv_Index-1] = 1;
      }
      else
      {
        if (hv_sign == null)
          hv_sign = new HTuple();
        hv_sign[hv_Index-1] = 0;
      }
    }



    ho_GrayImage.Dispose();
    ho_ObjectSelected.Dispose();
    ho_ImageReduced.Dispose();
    ho_Edges.Dispose();

    hv_SignNum.Dispose();
    hv_SignThreshold.Dispose();
    hv_Index.Dispose();
    hv_Length.Dispose();
    hv_Length1.Dispose();

    return;
  }


}

